<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PigWatcher</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.pigwatcher.com/"/>
  <updated>2020-11-22T13:48:33.098Z</updated>
  <id>http://www.pigwatcher.com/</id>
  
  <author>
    <name>Chan_yolo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeeCode-242</title>
    <link href="http://www.pigwatcher.com/2020/11/22/LeeCode-242/"/>
    <id>http://www.pigwatcher.com/2020/11/22/LeeCode-242/</id>
    <published>2020-11-22T13:47:10.000Z</published>
    <updated>2020-11-22T13:48:33.098Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>给定两个字符串 <em>s</em> 和 <em>t</em> ，编写一个函数来判断 <em>t</em> 是否是 <em>s</em> 的字母异位词。</p><p><strong>示例 1:</strong></p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">&gt;输出: true</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isAnagram</span><span class="params">(self, s: str, t: str)</span> -&gt; bool:</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> len(s) != len(t):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        table = dict()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> table:</span><br><span class="line">                table[s[i]] = <span class="number">1</span> + table[s[i]]</span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                table[s[i]] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(t)):</span><br><span class="line">            <span class="keyword">if</span> t[i] <span class="keyword">in</span> table:</span><br><span class="line">                table[t[i]] =  table[t[i]] - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                table[t[i]] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> table:</span><br><span class="line">            <span class="keyword">if</span> table[key] != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/categories/LeeCode/"/>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/tags/LeeCode/"/>
    
      <category term="HashTable" scheme="http://www.pigwatcher.com/tags/HashTable/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode-14</title>
    <link href="http://www.pigwatcher.com/2020/11/20/LeeCode-14/"/>
    <id>http://www.pigwatcher.com/2020/11/20/LeeCode-14/</id>
    <published>2020-11-20T13:41:32.000Z</published>
    <updated>2020-11-20T13:44:23.992Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"></span><br><span class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出: &quot;fl&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例 2:</span><br><span class="line"></span><br><span class="line">&gt; 输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">&gt; 输出: &quot;&quot;</span><br><span class="line">&gt; 解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        aa , lens = strs[<span class="number">0</span>], len(strs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, lens):</span><br><span class="line">            aa = self.lct(aa, strs[i])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> aa:</span><br><span class="line">                <span class="keyword">break</span>               </span><br><span class="line">        <span class="keyword">return</span> aa</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lct</span> <span class="params">(self , s1, s2)</span>:</span></span><br><span class="line">        length, index = min(len(s1), len(s2)) ,<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> length &gt; index <span class="keyword">and</span> s1[index] == s2[index]:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> s1[:index]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编写一个函数来查找字符串数组中的最长公共前缀。&lt;/p&gt;
&lt;p&gt;如果不存在公共前缀，返回空字符串 “”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/categories/LeeCode/"/>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/tags/LeeCode/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode-#136</title>
    <link href="http://www.pigwatcher.com/2020/09/27/LeeCode-136/"/>
    <id>http://www.pigwatcher.com/2020/09/27/LeeCode-136/</id>
    <published>2020-09-27T14:46:13.000Z</published>
    <updated>2020-09-27T14:52:50.443Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><blockquote><p>两个数字的<strong>二进制</strong>进行运算，</p><p>运算规则：</p><p>相同为零，不同为1</p><p><strong>位运算</strong>符合交换律 a^b^c = a^c^b</p><p><strong>任何数</strong> 和 <strong>0</strong> 异或为任何数  0 ^ n =&gt; n </p><p><strong>任何数</strong> 和 <strong>本身</strong> 异a或为 0  n^n=0</p></blockquote><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            s = s ^ num</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;位运算&quot;&gt;&lt;a href=&quot;#位运算&quot; class=&quot;headerlink&quot; title=&quot;位运算&quot;&gt;&lt;/a&gt;位运算&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;两个数字的&lt;strong&gt;二进制&lt;/strong&gt;进行运算，&lt;/p&gt;
&lt;p&gt;运算规则：&lt;/p&gt;
&lt;p&gt;相同为零，不同为1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;位运算&lt;/strong&gt;符合交换律 a^b^c = a^c^b&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;任何数&lt;/strong&gt; 和 &lt;strong&gt;0&lt;/strong&gt; 异或为任何数  0 ^ n =&amp;gt; n &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;任何数&lt;/strong&gt; 和 &lt;strong&gt;本身&lt;/strong&gt; 异a或为 0  n^n=0&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/categories/LeeCode/"/>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/tags/LeeCode/"/>
    
      <category term="位运算" scheme="http://www.pigwatcher.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode-#367</title>
    <link href="http://www.pigwatcher.com/2020/09/23/LeeCode-367/"/>
    <id>http://www.pigwatcher.com/2020/09/23/LeeCode-367/</id>
    <published>2020-09-23T14:47:33.000Z</published>
    <updated>2020-09-23T14:50:12.766Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>每天一个简单题</strong></p></blockquote><blockquote><p>给定一个正整数 num，编写一个函数，如果 num 是一个完全平方数，则返回 True，否则返回 False。</p><p>说明：不要使用任何内置的库函数，如  sqrt。</p><p>示例 1：</p><p>输入：16<br>输出：True<br>示例 2：</p><p>输入：14<br>输出：False</p></blockquote><a id="more"></a><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPerfectSquare</span><span class="params">(self, num: int)</span> -&gt; bool:</span> </span><br><span class="line"></span><br><span class="line">        left, right = <span class="number">1</span>, num//<span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right):</span><br><span class="line">            mid = (left+right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> (mid * mid &lt;= num):</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                right = mid</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left*left == num</span><br></pre></td></tr></table></figure><p><strong>超时</strong></p><h2 id="牛顿法"><a href="#牛顿法" class="headerlink" title="牛顿法"></a>牛顿法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPerfectSquare</span><span class="params">(self, num: int)</span> -&gt; bool:</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        i = num</span><br><span class="line">        <span class="keyword">while</span> i * i &gt; num:</span><br><span class="line">            i = (i + num / i) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> i * i == num</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;每天一个简单题&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个正整数 num，编写一个函数，如果 num 是一个完全平方数，则返回 True，否则返回 False。&lt;/p&gt;
&lt;p&gt;说明：不要使用任何内置的库函数，如  sqrt。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;输入：16&lt;br&gt;输出：True&lt;br&gt;示例 2：&lt;/p&gt;
&lt;p&gt;输入：14&lt;br&gt;输出：False&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/categories/LeeCode/"/>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/tags/LeeCode/"/>
    
      <category term="二分法" scheme="http://www.pigwatcher.com/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode-#704</title>
    <link href="http://www.pigwatcher.com/2020/09/22/LeeCode-704/"/>
    <id>http://www.pigwatcher.com/2020/09/22/LeeCode-704/</id>
    <published>2020-09-22T14:51:27.000Z</published>
    <updated>2020-09-23T14:45:16.553Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>每天一个简单题</strong></p></blockquote><blockquote><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>示例 1:</p><p>输入: nums = [-1,0,3,5,9,12], target = 9<br>输出: 4<br>解释: 9 出现在 nums 中并且下标为 4<br>示例 2:</p><p>输入: nums = [-1,0,3,5,9,12], target = 2<br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1</p></blockquote><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        left, right = <span class="number">0</span>, len(nums)<span class="number">-1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left+right) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> nums[mid] == target:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> nums[mid] &lt;target:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                right = mid - <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;每天一个简单题&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: nums = [-1,0,3,5,9,12], target = 9&lt;br&gt;输出: 4&lt;br&gt;解释: 9 出现在 nums 中并且下标为 4&lt;br&gt;示例 2:&lt;/p&gt;
&lt;p&gt;输入: nums = [-1,0,3,5,9,12], target = 2&lt;br&gt;输出: -1&lt;br&gt;解释: 2 不存在 nums 中因此返回 -1&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/categories/LeeCode/"/>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/tags/LeeCode/"/>
    
      <category term="二分法" scheme="http://www.pigwatcher.com/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode-#167</title>
    <link href="http://www.pigwatcher.com/2020/09/21/LeeCode-167/"/>
    <id>http://www.pigwatcher.com/2020/09/21/LeeCode-167/</id>
    <published>2020-09-21T13:10:27.000Z</published>
    <updated>2020-09-23T14:44:01.874Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>每天一个简单题</strong></p></blockquote><blockquote><p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。</p><p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p><p>说明:</p><p>返回的下标值（index1 和 index2）不是从零开始的。<br>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。<br>示例:</p><p>输入: numbers = [2, 7, 11, 15], target = 9<br>输出: [1,2]<br>解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p></blockquote><a id="more"></a><h3 id="直接暴力法"><a href="#直接暴力法" class="headerlink" title="直接暴力法"></a>直接暴力法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, numbers: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(numbers)):</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(numbers)):</span><br><span class="line">                <span class="keyword">if</span>(numbers[i]+numbers[j]) == target:</span><br><span class="line">                    index1, index2 = i+<span class="number">1</span>, j+<span class="number">1</span></span><br><span class="line">                    <span class="keyword">return</span> index1,index2</span><br></pre></td></tr></table></figure><blockquote><p>不得法：超时</p></blockquote><!-- more --><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, numbers: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line"></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = len(numbers)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right):</span><br><span class="line">            <span class="keyword">if</span> (numbers[left] + numbers[right]) == target:</span><br><span class="line">                <span class="keyword">return</span> left+<span class="number">1</span>, right+<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> (numbers[left] + numbers[right]) &lt; target:</span><br><span class="line">                left = left + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = right - <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;每天一个简单题&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。&lt;/p&gt;
&lt;p&gt;函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。&lt;/p&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;返回的下标值（index1 和 index2）不是从零开始的。&lt;br&gt;你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。&lt;br&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: numbers = [2, 7, 11, 15], target = 9&lt;br&gt;输出: [1,2]&lt;br&gt;解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/categories/LeeCode/"/>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/tags/LeeCode/"/>
    
      <category term="二分法" scheme="http://www.pigwatcher.com/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode-#69</title>
    <link href="http://www.pigwatcher.com/2020/09/20/LeeCode-69/"/>
    <id>http://www.pigwatcher.com/2020/09/20/LeeCode-69/</id>
    <published>2020-09-20T12:33:49.000Z</published>
    <updated>2020-09-23T14:43:11.449Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>每天一个简单题</strong></p></blockquote><blockquote><p> 实现 int sqrt(int x) 函数。</p><p>计算并返回 x 的平方根，其中 x 是非负整数。</p><p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p></blockquote><a id="more"></a><h2 id="经典二分法"><a href="#经典二分法" class="headerlink" title="经典二分法"></a>经典二分法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mySqrt</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        left, right = <span class="number">1</span>, x//<span class="number">2</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right):</span><br><span class="line">            mid = (left+right) // <span class="number">2</span></span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> mid*mid &lt;= x:  </span><br><span class="line">                ans = mid</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">               right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;每天一个简单题&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt; 实现 int sqrt(int x) 函数。&lt;/p&gt;
&lt;p&gt;计算并返回 x 的平方根，其中 x 是非负整数。&lt;/p&gt;
&lt;p&gt;由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/categories/LeeCode/"/>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/tags/LeeCode/"/>
    
      <category term="二分法" scheme="http://www.pigwatcher.com/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeeCode-#350</title>
    <link href="http://www.pigwatcher.com/2020/08/16/LeeCode-350/"/>
    <id>http://www.pigwatcher.com/2020/08/16/LeeCode-350/</id>
    <published>2020-08-16T07:47:36.000Z</published>
    <updated>2020-09-23T14:44:39.614Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>每天一个简单题</strong></p></blockquote><blockquote><p>给定两个数组，编写一个函数来计算它们的交集。</p><p>示例 1：</p><p>输入：nums1 = [1,2,2,1], nums2 = [2,2]<br>输出：[2,2]<br>示例 2:</p><p>输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br>输出：[4,9]</p></blockquote><a id="more"></a><h2 id="法1-哈希表求解"><a href="#法1-哈希表求解" class="headerlink" title="法1 . 哈希表求解"></a>法1 . 哈希表求解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intersect</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (len(nums1) &gt; len(nums2)):</span><br><span class="line">            <span class="keyword">return</span> self.intersect(nums2, nums1)</span><br><span class="line">        </span><br><span class="line">        m = collections.Counter()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums1:</span><br><span class="line">            m[num] += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        res = list()</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums2:</span><br><span class="line">            <span class="keyword">if</span> (m.get(num, <span class="number">0</span>) &gt; <span class="number">0</span>):</span><br><span class="line">                res.append(num)</span><br><span class="line">                m[num] -= <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><!-- more --><h2 id="法2-双指针排序"><a href="#法2-双指针排序" class="headerlink" title="法2 . 双指针排序"></a>法2 . 双指针排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intersect</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        </span><br><span class="line">        nums1.sort()</span><br><span class="line">        nums2.sort()</span><br><span class="line">        len1, len2 = len(nums1), len(nums2)</span><br><span class="line">        index1 , index2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        res = list()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> index1 &lt; len1 <span class="keyword">and</span> index2 &lt; len2:</span><br><span class="line">            <span class="keyword">if</span> nums1[index1] &lt; nums2[index2]:</span><br><span class="line">                index1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums1[index1] &gt; nums2[index2]:</span><br><span class="line">                index2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(nums2[index2])</span><br><span class="line">                index1 += <span class="number">1</span></span><br><span class="line">                index2 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;每天一个简单题&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;给定两个数组，编写一个函数来计算它们的交集。&lt;/p&gt;
&lt;p&gt;示例 1：&lt;/p&gt;
&lt;p&gt;输入：nums1 = [1,2,2,1], nums2 = [2,2]&lt;br&gt;输出：[2,2]&lt;br&gt;示例 2:&lt;/p&gt;
&lt;p&gt;输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]&lt;br&gt;输出：[4,9]&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/categories/LeeCode/"/>
    
    
      <category term="LeeCode" scheme="http://www.pigwatcher.com/tags/LeeCode/"/>
    
      <category term="二分法" scheme="http://www.pigwatcher.com/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>简易的学生成绩管理系统</title>
    <link href="http://www.pigwatcher.com/2020/07/18/%E7%AE%80%E6%98%93%E7%9A%84%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.pigwatcher.com/2020/07/18/%E7%AE%80%E6%98%93%E7%9A%84%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-07-18T06:33:19.000Z</published>
    <updated>2020-07-18T06:41:02.119Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>这是大二下的Javaee 课程的大作业</p><p>基于ssm 创作的简易学生成绩管理系统</p></blockquote><a id="more"></a> <h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="老师端"><a href="#老师端" class="headerlink" title="老师端"></a>老师端</h3><ol><li>登录，修改密码</li><li>修改学生信息</li></ol><h3 id="学生端"><a href="#学生端" class="headerlink" title="学生端"></a>学生端</h3><ol><li>登录，修改密码</li><li>查看信息</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>大作业要求实现的功能简单的</li><li>比较系统的了解了java开发的过程</li><li>记录</li></ol><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><blockquote><p><a href="https://github.com/c-yuqi/ssm_StudentScoreManagement.git" target="_blank" rel="noopener">https://github.com/c-yuqi/ssm_StudentScoreManagement.git</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是大二下的Javaee 课程的大作业&lt;/p&gt;
&lt;p&gt;基于ssm 创作的简易学生成绩管理系统&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.pigwatcher.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.pigwatcher.com/tags/java/"/>
    
      <category term="ssm" scheme="http://www.pigwatcher.com/tags/ssm/"/>
    
  </entry>
  
  <entry>
    <title>高效率的搜索开源项目</title>
    <link href="http://www.pigwatcher.com/2020/05/13/%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E6%90%9C%E7%B4%A2%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <id>http://www.pigwatcher.com/2020/05/13/%E9%AB%98%E6%95%88%E7%8E%87%E7%9A%84%E6%90%9C%E7%B4%A2%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-05-13T10:33:21.000Z</published>
    <updated>2020-07-18T06:41:44.496Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在GitHub中高效的查找开源项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">in:name Spring boot # 名称中带有Spring boot的</span><br><span class="line">in:readme Spring boot # 在readme中搜索</span><br><span class="line">in:description Spring boot # 描述中有Spring boot</span><br><span class="line"></span><br><span class="line">stars:&gt;num # Stars 大于 num的项目</span><br><span class="line">forks:&gt;num # forks 大于 num的项目</span><br><span class="line">pushed:&gt;2020 # 在2020年之后有更新的项目</span><br><span class="line">language:java # 用Java编写的</span><br></pre></td></tr></table></figure><p><strong>更多操作，可以访问GitHub的官方文档</strong></p><blockquote><p>Github 官方文档</p><p><a href="https://help.github.com/en/github/searching-for-information-on-github/searching-on-github" target="_blank" rel="noopener">https://help.github.com/en/github/searching-for-information-on-github/searching-on-github</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
      <category term="github" scheme="http://www.pigwatcher.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>git command</title>
    <link href="http://www.pigwatcher.com/2020/04/13/git-command/"/>
    <id>http://www.pigwatcher.com/2020/04/13/git-command/</id>
    <published>2020-04-13T07:31:44.000Z</published>
    <updated>2020-04-13T07:33:17.834Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>创建一个仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init [仓库名]</span><br></pre></td></tr></table></figure><p>把文件添加到仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [文件名]</span><br></pre></td></tr></table></figure><p>把文件提交到仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &apos;提交说明&apos;</span><br></pre></td></tr></table></figure><p>查看状态，是否有文件被修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><a id="more"></a><p>查看修改的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>有近到远的查看提交日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>回到之前的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard [HEAD^ </span><br><span class="line">HEAD^^ </span><br><span class="line">HEAD~100</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>记录每条命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>让这个文件回到最近一次修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- [file]</span><br></pre></td></tr></table></figure><p>删除文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm [file]</span><br></pre></td></tr></table></figure><p>关联一个远程库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:c-yuqi/yuqi.git</span><br></pre></td></tr></table></figure><p>把本地库的内容推送到远程库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master # 第一次推送 [-u]</span><br></pre></td></tr></table></figure><p>推送成功</p><p>从现在起，只要本地作了提交，就可以通过命令 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>从远程库克隆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh地址</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建一个仓库&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init [仓库名]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;把文件添加到仓库&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add [文件名]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;把文件提交到仓库&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;apos;提交说明&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;查看状态，是否有文件被修改&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git status&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://www.pigwatcher.com/categories/git/"/>
    
    
      <category term="git" scheme="http://www.pigwatcher.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>在配置tomcat和使用上踩的坑</title>
    <link href="http://www.pigwatcher.com/2020/03/16/%E5%9C%A8%E9%85%8D%E7%BD%AEtomcat%E5%92%8C%E4%BD%BF%E7%94%A8%E4%B8%8A%E8%B8%A9%E7%9A%84%E5%9D%91/"/>
    <id>http://www.pigwatcher.com/2020/03/16/%E5%9C%A8%E9%85%8D%E7%BD%AEtomcat%E5%92%8C%E4%BD%BF%E7%94%A8%E4%B8%8A%E8%B8%A9%E7%9A%84%E5%9D%91/</id>
    <published>2020-03-16T06:54:37.000Z</published>
    <updated>2020-03-16T07:02:44.637Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="在配置tomcat和使用上踩的坑"><a href="#在配置tomcat和使用上踩的坑" class="headerlink" title="在配置tomcat和使用上踩的坑"></a>在配置tomcat和使用上踩的坑</h1><a id="more"></a><h3 id="在eclipse上安装java-ee-插件"><a href="#在eclipse上安装java-ee-插件" class="headerlink" title="在eclipse上安装java ee 插件"></a>在eclipse上安装java ee 插件</h3><p>1.1 eclipse -&gt; Help -&gt; install new software</p><p>1.2 在work with 中输入 <code>2019-12 - http://download.eclipse.org/releases/2019-12</code></p><blockquote><p>这里要注意这儿链接 地址 是 <code>http://download.eclipse.org/releases/indigo+你eclipse的版本号</code>  版本号 : 打开 eclipse文件夹 — readme – readme_eclipse.html</p></blockquote><p>1.3 在最下面 （web,xml,java EE and OSGI…..）中选择，勾选  Web，XML,Java EE and OSG… ；然后 next 安装 ，之后重启 eclipse</p><p><img src="https://s1.ax1x.com/2020/03/16/8JZMvQ.png" alt="8JZMvQ.png"></p><p><a href="https://imgchr.com/i/8JZnC8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/16/8JZnC8.png" alt="8JZnC8.png"></a></p><blockquote><p>引用网图</p></blockquote><h3 id="部署-tomcat"><a href="#部署-tomcat" class="headerlink" title="部署 tomcat"></a>部署 tomcat</h3><p>1.1 打开eclipse -&gt; Window -&gt; Preferences ，在里面找到 Server </p><p><a href="https://imgchr.com/i/8JZKgg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/16/8JZKgg.md.png" alt="8JZKgg.md.png"></a></p><p>1.2 如图， 选择适合你自己的tomcat版本 ，进行部署</p><p><img src="https://s1.ax1x.com/2020/03/16/8JZu8S.png" alt="8JZu8S.png"></p><p>1.3 完成之后 ， 重启eclipse； 点击控制台的 server ，双击 </p><p><img src="https://s1.ax1x.com/2020/03/16/8JZe4f.png" alt="8JZe4f.png"></p><p>1.4 勾选如下配置，保存 ，重启，即可</p><p><img src="https://s1.ax1x.com/2020/03/16/8JZluj.png" alt="8JZluj.png"></p><h3 id="在后期的使用中也会出现一些部署tomcat上的错误"><a href="#在后期的使用中也会出现一些部署tomcat上的错误" class="headerlink" title="在后期的使用中也会出现一些部署tomcat上的错误:"></a>在后期的使用中也会出现一些部署tomcat上的错误:</h3><p>比如：</p><p>tomcat启动后，localhost:8080 能访问，但自己的项目却无法访问</p><p>在tomcat中 webapps 中应该是会有你的当前项目的文件夹， 如果没有 可以 将自己的项目导出，放道webapps中</p><p>在此启动tomcat ，就可以访问了</p><blockquote><p>如果实在不行 ，可以将tomcat 重新部署一次 ，记得删除server 项目</p></blockquote><p>希望本文章对你有用</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在配置tomcat和使用上踩的坑&quot;&gt;&lt;a href=&quot;#在配置tomcat和使用上踩的坑&quot; class=&quot;headerlink&quot; title=&quot;在配置tomcat和使用上踩的坑&quot;&gt;&lt;/a&gt;在配置tomcat和使用上踩的坑&lt;/h1&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>将个人博客同时部署到Github和Coding</title>
    <link href="http://www.pigwatcher.com/2020/01/12/%E5%B0%86%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%88%B0Github%E5%92%8CCoding/"/>
    <id>http://www.pigwatcher.com/2020/01/12/%E5%B0%86%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%97%B6%E9%83%A8%E7%BD%B2%E5%88%B0Github%E5%92%8CCoding/</id>
    <published>2020-01-12T07:10:16.000Z</published>
    <updated>2020-04-11T07:17:49.536Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="将个人博客同时部署到GitHub和coding"><a href="#将个人博客同时部署到GitHub和coding" class="headerlink" title="将个人博客同时部署到GitHub和coding"></a>将个人博客同时部署到GitHub和coding</h1><blockquote><p>之前是将个人部署到GitHub上的，但访问速度很慢，于是选择了同时部署到GitHub和coding上，做国内外分流。<br>本文是在已将个人博客部署在GitHub的基础上，将个人博客部署到coding，实现分流访问</p></blockquote><a id="more"></a> <h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>1.创建coding用户</p><p>2.创建一个新的项目<br>    <img src="https://s2.ax1x.com/2020/01/12/lopEhn.jpg" alt="lopEhn.jpg"></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>将存放在GitHub的代码导入到刚刚新建的coding内<br>1.本地执行</p><pre><code>&gt;  git clone https://github.com/antirez/redis.git(这里填你代码仓的地址) --bare </code></pre><p>2.打开git bash ，输入 ls<br>    <a href="https://imgchr.com/i/lopY1x" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/12/lopY1x.md.jpg" alt="lopY1x.md.jpg"></a><br>    找到与自己GitHub仓库名相同的那个文件（这里是 c-yuqi.github.io.git）<br>3.将克隆下来的仓库推送到 CODING<br>    使用仓库页面提供的 URL。<br>    <a href="https://imgchr.com/i/lorLh6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/12/lorLh6.md.jpg" alt="lorLh6.md.jpg"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd c-yuqi.github.io.git</span><br><span class="line">git push https://git.coding.net/jiong/redis.git --all</span><br></pre></td></tr></table></figure><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>将ssh公匙填入coding<br><a href="https://imgchr.com/i/lo5Gn0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/12/lo5Gn0.md.jpg" alt="lo5Gn0.md.jpg"></a></p><blockquote><p>如果没有ssh公匙可以参考<a href="https://blog.csdn.net/weixin_39417086/article/details/86572434" target="_blank" rel="noopener">Git配置ssh公钥</a></p></blockquote><p> <a href="https://imgchr.com/i/looRld" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/12/looRld.md.jpg" alt="looRld.md.jpg"></a></p><p>​    然后 打开page服务</p><p>​    <img src="https://s2.ax1x.com/2020/01/12/loIub6.jpg" alt="loIub6.jpg"></p><h1 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h1><p>更改hexo的根目录配置文件_config.yml</p><p><a href="https://imgchr.com/i/loopzd" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/12/loopzd.md.jpg" alt="loopzd.md.jpg"></a></p><h1 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h1><p>开始分流，国内的结点访问coding，国外的结点访问GitHub</p><p>coding的主机记录值为 www ,记录类型为 CNAME ， 解析线路 默认 </p><p><a href="https://imgchr.com/i/loTAXR" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/12/loTAXR.md.jpg" alt="loTAXR.md.jpg"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;将个人博客同时部署到GitHub和coding&quot;&gt;&lt;a href=&quot;#将个人博客同时部署到GitHub和coding&quot; class=&quot;headerlink&quot; title=&quot;将个人博客同时部署到GitHub和coding&quot;&gt;&lt;/a&gt;将个人博客同时部署到GitHub和coding&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;之前是将个人部署到GitHub上的，但访问速度很慢，于是选择了同时部署到GitHub和coding上，做国内外分流。&lt;br&gt;本文是在已将个人博客部署在GitHub的基础上，将个人博客部署到coding，实现分流访问&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.pigwatcher.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.pigwatcher.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>java字符串的压缩</title>
    <link href="http://www.pigwatcher.com/2019/12/05/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8E%8B%E7%BC%A9/"/>
    <id>http://www.pigwatcher.com/2019/12/05/java%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8E%8B%E7%BC%A9/</id>
    <published>2019-12-05T13:40:54.000Z</published>
    <updated>2020-03-11T05:37:38.101Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#题目</p><blockquote><p>编写程序，使其压缩字符串，例如：字符串:DDffhg;经过压缩得到:D2f2hg</p></blockquote><p>##代码</p><a id="more"></a> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Scanner s=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">  String str=s.nextLine();</span><br><span class="line">     StringBuffer result = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">     <span class="keyword">char</span> word1 = str.charAt(<span class="number">0</span>);<span class="comment">// 取第一个字符</span></span><br><span class="line">     <span class="keyword">int</span> sum = <span class="number">1</span>;<span class="comment">// 连续字符的个数</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">         <span class="keyword">char</span> word2 = str.charAt(i);    <span class="comment">// 循环取字符</span></span><br><span class="line">         <span class="keyword">if</span> (word1 == word2) &#123;<span class="comment">// 把前一个字符和当前字符比较</span></span><br><span class="line">             sum++; <span class="comment">// 相同的字符 个数加1</span></span><br><span class="line">             <span class="keyword">continue</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(sum==<span class="number">1</span>)</span><br><span class="line">         result.append(word1); <span class="comment">// 拼接字符</span></span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">         result.append(word1).append(sum); </span><br><span class="line">         word1 = word2;    <span class="comment">// 当前字符变为前一个字符</span></span><br><span class="line">         sum = <span class="number">1</span>;<span class="comment">// 重置</span></span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(<span class="string">"字符串压缩后:"</span> + result.append(word1).append(sum));<span class="comment">// 加上最后一个字符及个数，打印输出</span></span><br></pre></td></tr></table></figure><blockquote><p>2019-12-5 21:44:31 星期四</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#题目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编写程序，使其压缩字符串，例如：字符串:DDffhg;经过压缩得到:D2f2hg&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://www.pigwatcher.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.pigwatcher.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C语言解决迷宫</title>
    <link href="http://www.pigwatcher.com/2019/11/16/C%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%86%B3%E8%BF%B7%E5%AE%AB/"/>
    <id>http://www.pigwatcher.com/2019/11/16/C%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%86%B3%E8%BF%B7%E5%AE%AB/</id>
    <published>2019-11-16T03:11:33.000Z</published>
    <updated>2020-03-11T05:35:53.272Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#迷宫（C语言版）</p><blockquote><p>运用C语言栈，实现迷宫算法</p></blockquote><p>##思路</p><ol><li>从入口出发，我们首先规定：没经过一个点按照（东南西北）方向依次试探</li><li>若能通过，则将迷宫数组的值改为curstep++,</li><li>不能通过，则改变direction</li><li>如果东南西北四个方向都不能通过，回溯，并将迷宫数组的值改为-1</li><li>直到找到终点</li></ol><p>##具体实现</p><a id="more"></a><ol><li>首先创建迷宫数组</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;PostType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> ord; <span class="comment">// 序号</span></span><br><span class="line">PostType seat; <span class="comment">//坐标 </span></span><br><span class="line"><span class="keyword">int</span> di;  <span class="comment">//方向</span></span><br><span class="line">&#125;SElemType;</span><br><span class="line"><span class="keyword">int</span> maze[<span class="number">9</span>][<span class="number">9</span>]=&#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">PostType direct[<span class="number">4</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;; <span class="comment">// 东南西北</span></span><br><span class="line"><span class="keyword">int</span> curstep = <span class="number">1</span>; <span class="comment">//记录步数</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建栈，便于回溯（这里采用顺序栈）</li></ol><blockquote><p>顺序栈的基本操作</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">SElemType *base;</span><br><span class="line">SElemType *top;</span><br><span class="line"><span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">( SqStack &amp;S )</span></span>&#123; <span class="comment">//创建栈</span></span><br><span class="line">S.base=(SElemType*)<span class="built_in">malloc</span>(STACK_INIT_SIZE*<span class="keyword">sizeof</span>(SElemType));</span><br><span class="line"><span class="keyword">if</span>(!S.base) <span class="keyword">return</span> ERROR;</span><br><span class="line">S.top=S.base;</span><br><span class="line">S.stacksize=STACK_INIT_SIZE;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(SqStack &amp;S, SElemType e)</span><span class="comment">//入栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(S.top-S.base==S.stacksize) &#123; </span><br><span class="line">S.base=(SElemType*)<span class="built_in">realloc</span>(S.base, (S.stacksize+STACKINCREMENT)*<span class="keyword">sizeof</span>(SElemType)); </span><br><span class="line"><span class="keyword">if</span>(!S.base)   <span class="built_in">exit</span>(OVERFLOW); </span><br><span class="line">S.top=S.base+S.stacksize; </span><br><span class="line">S.stacksize+=STACKINCREMENT; </span><br><span class="line">&#125;</span><br><span class="line">*(S.top)++=e; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack &amp;S, SElemType &amp;e)</span> </span>&#123; <span class="comment">//出栈</span></span><br><span class="line"><span class="keyword">if</span>(S.top == S.base)</span><br><span class="line"><span class="keyword">return</span> ERROR ; <span class="comment">// Empty Stack</span></span><br><span class="line">e= * (S.top<span class="number">-1</span>);</span><br><span class="line">S.top=S.top<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>迷宫求解</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">Pass</span> <span class="params">( PostType b)</span></span>&#123;  <span class="comment">//判断 能否 通过</span></span><br><span class="line"><span class="keyword">if</span>(maze[b.x][b.y]==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FootPrint</span><span class="params">(PostType b)</span></span>&#123;  <span class="comment">// 标记 通过的 点</span></span><br><span class="line">maze[b.x][b.y]=curstep;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NextPos</span><span class="params">(PostType &amp;b,<span class="keyword">int</span> di)</span></span>&#123; <span class="comment">// 偏移量</span></span><br><span class="line">b.x=b.x+direct[di].x;</span><br><span class="line">b.y=b.y+direct[di].y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MarkPrint</span><span class="params">(PostType b)</span></span>&#123;  <span class="comment">// 不能通过</span></span><br><span class="line">maze[b.x][b.y]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">MazePath</span> <span class="params">(PostType begin,PostType end )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PostType curpos;</span><br><span class="line">SqStack s;</span><br><span class="line">SElemType e;</span><br><span class="line">curpos = begin;</span><br><span class="line">InitStack (s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">e.di=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(Pass ( curpos) )&#123;<span class="comment">//判断 位置能否通过</span></span><br><span class="line">FootPrint( curpos );<span class="comment">//留下足迹</span></span><br><span class="line">e.di=<span class="number">0</span>;<span class="comment">//每次都从东开始走</span></span><br><span class="line">e.ord=curstep;<span class="comment">//栈元素的序号变为当前足迹curstep</span></span><br><span class="line">e.seat=curpos;<span class="comment">//栈元素变为当前位置</span></span><br><span class="line">curstep++;<span class="comment">//足迹加有1</span></span><br><span class="line">Push( s , e);<span class="comment">//入栈</span></span><br><span class="line"><span class="keyword">if</span>(curpos.x==end.x &amp;&amp; curpos.y==end.y)</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">NextPos( curpos , e.di);<span class="comment">//有当前位置和direct，确定下一个位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!StackEmpty(s))&#123;<span class="comment">//栈不空</span></span><br><span class="line">Pop(s,e);<span class="comment">//出栈</span></span><br><span class="line">curstep--;<span class="comment">//足迹减1</span></span><br><span class="line"><span class="keyword">while</span>( e.di==<span class="number">3</span> &amp;&amp; !StackEmpty(s) )&#123;前一位置处于最后一个方向（北）且栈不空</span><br><span class="line">MarkPrint( e.seat );<span class="comment">//标记为-1</span></span><br><span class="line">Pop(s,e);<span class="comment">//出栈</span></span><br><span class="line">curstep--;<span class="comment">//足迹减1</span></span><br><span class="line">&#125;<span class="comment">//while </span></span><br><span class="line"><span class="keyword">if</span>(e.di&lt;<span class="number">3</span>)&#123;<span class="comment">//未到最后一个方向</span></span><br><span class="line">e.di++;<span class="comment">//换个方向</span></span><br><span class="line">Push(s,e);<span class="comment">//入栈</span></span><br><span class="line">curstep ++ ;<span class="comment">//足迹加1</span></span><br><span class="line">curpos = e.seat;<span class="comment">//确定当前位置</span></span><br><span class="line">NextPos(curpos,e.di);<span class="comment">//确定下一个位置</span></span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line">&#125;<span class="comment">//if</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(!StackEmpty(s));</span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##总结<br>从入口到出口的一条路径由全局maze数组显示。入口值依次为2，3，等。其中栈元素的di成员的值为0~3，数组maze的作用是当探测失败的时，通过退栈回到前一点，从前一点再继续试探。</p><blockquote><p>2019-11-14 13:29:31 星期四</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#迷宫（C语言版）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;运用C语言栈，实现迷宫算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##思路&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从入口出发，我们首先规定：没经过一个点按照（东南西北）方向依次试探&lt;/li&gt;
&lt;li&gt;若能通过，则将迷宫数组的值改为curstep++,&lt;/li&gt;
&lt;li&gt;不能通过，则改变direction&lt;/li&gt;
&lt;li&gt;如果东南西北四个方向都不能通过，回溯，并将迷宫数组的值改为-1&lt;/li&gt;
&lt;li&gt;直到找到终点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;##具体实现&lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="http://www.pigwatcher.com/categories/C/"/>
    
    
      <category term="算法" scheme="http://www.pigwatcher.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.pigwatcher.com/2019/09/12/Hello-world/"/>
    <id>http://www.pigwatcher.com/2019/09/12/Hello-world/</id>
    <published>2019-09-12T05:33:39.000Z</published>
    <updated>2020-08-16T08:04:47.644Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Chan-yolo’s-Blog"><a href="#Chan-yolo’s-Blog" class="headerlink" title="Chan_yolo’s Blog"></a>Chan_yolo’s Blog</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
